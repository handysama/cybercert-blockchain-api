// Code generated by go-swagger; DO NOT EDIT.

package certificate_template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"cybercert-blockchain-api/models"
)

// PostCertificateTemplateQueryOKCode is the HTTP code returned for type PostCertificateTemplateQueryOK
const PostCertificateTemplateQueryOKCode int = 200

/*
PostCertificateTemplateQueryOK OK

swagger:response postCertificateTemplateQueryOK
*/
type PostCertificateTemplateQueryOK struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPostCertificateTemplateQueryOK creates PostCertificateTemplateQueryOK with default headers values
func NewPostCertificateTemplateQueryOK() *PostCertificateTemplateQueryOK {

	return &PostCertificateTemplateQueryOK{}
}

// WithPayload adds the payload to the post certificate template query o k response
func (o *PostCertificateTemplateQueryOK) WithPayload(payload interface{}) *PostCertificateTemplateQueryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post certificate template query o k response
func (o *PostCertificateTemplateQueryOK) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCertificateTemplateQueryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostCertificateTemplateQueryUnauthorizedCode is the HTTP code returned for type PostCertificateTemplateQueryUnauthorized
const PostCertificateTemplateQueryUnauthorizedCode int = 401

/*
PostCertificateTemplateQueryUnauthorized Unauthorized

swagger:response postCertificateTemplateQueryUnauthorized
*/
type PostCertificateTemplateQueryUnauthorized struct {
}

// NewPostCertificateTemplateQueryUnauthorized creates PostCertificateTemplateQueryUnauthorized with default headers values
func NewPostCertificateTemplateQueryUnauthorized() *PostCertificateTemplateQueryUnauthorized {

	return &PostCertificateTemplateQueryUnauthorized{}
}

// WriteResponse to the client
func (o *PostCertificateTemplateQueryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// PostCertificateTemplateQueryInternalServerErrorCode is the HTTP code returned for type PostCertificateTemplateQueryInternalServerError
const PostCertificateTemplateQueryInternalServerErrorCode int = 500

/*
PostCertificateTemplateQueryInternalServerError Internal Server Error

swagger:response postCertificateTemplateQueryInternalServerError
*/
type PostCertificateTemplateQueryInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewPostCertificateTemplateQueryInternalServerError creates PostCertificateTemplateQueryInternalServerError with default headers values
func NewPostCertificateTemplateQueryInternalServerError() *PostCertificateTemplateQueryInternalServerError {

	return &PostCertificateTemplateQueryInternalServerError{}
}

// WithPayload adds the payload to the post certificate template query internal server error response
func (o *PostCertificateTemplateQueryInternalServerError) WithPayload(payload *models.APIResponse) *PostCertificateTemplateQueryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post certificate template query internal server error response
func (o *PostCertificateTemplateQueryInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCertificateTemplateQueryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
