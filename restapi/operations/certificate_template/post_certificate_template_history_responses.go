// Code generated by go-swagger; DO NOT EDIT.

package certificate_template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"cybercert-blockchain-api/models"
)

// PostCertificateTemplateHistoryOKCode is the HTTP code returned for type PostCertificateTemplateHistoryOK
const PostCertificateTemplateHistoryOKCode int = 200

/*
PostCertificateTemplateHistoryOK OK

swagger:response postCertificateTemplateHistoryOK
*/
type PostCertificateTemplateHistoryOK struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPostCertificateTemplateHistoryOK creates PostCertificateTemplateHistoryOK with default headers values
func NewPostCertificateTemplateHistoryOK() *PostCertificateTemplateHistoryOK {

	return &PostCertificateTemplateHistoryOK{}
}

// WithPayload adds the payload to the post certificate template history o k response
func (o *PostCertificateTemplateHistoryOK) WithPayload(payload interface{}) *PostCertificateTemplateHistoryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post certificate template history o k response
func (o *PostCertificateTemplateHistoryOK) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCertificateTemplateHistoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostCertificateTemplateHistoryUnauthorizedCode is the HTTP code returned for type PostCertificateTemplateHistoryUnauthorized
const PostCertificateTemplateHistoryUnauthorizedCode int = 401

/*
PostCertificateTemplateHistoryUnauthorized Unauthorized

swagger:response postCertificateTemplateHistoryUnauthorized
*/
type PostCertificateTemplateHistoryUnauthorized struct {
}

// NewPostCertificateTemplateHistoryUnauthorized creates PostCertificateTemplateHistoryUnauthorized with default headers values
func NewPostCertificateTemplateHistoryUnauthorized() *PostCertificateTemplateHistoryUnauthorized {

	return &PostCertificateTemplateHistoryUnauthorized{}
}

// WriteResponse to the client
func (o *PostCertificateTemplateHistoryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// PostCertificateTemplateHistoryInternalServerErrorCode is the HTTP code returned for type PostCertificateTemplateHistoryInternalServerError
const PostCertificateTemplateHistoryInternalServerErrorCode int = 500

/*
PostCertificateTemplateHistoryInternalServerError Internal Server Error

swagger:response postCertificateTemplateHistoryInternalServerError
*/
type PostCertificateTemplateHistoryInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewPostCertificateTemplateHistoryInternalServerError creates PostCertificateTemplateHistoryInternalServerError with default headers values
func NewPostCertificateTemplateHistoryInternalServerError() *PostCertificateTemplateHistoryInternalServerError {

	return &PostCertificateTemplateHistoryInternalServerError{}
}

// WithPayload adds the payload to the post certificate template history internal server error response
func (o *PostCertificateTemplateHistoryInternalServerError) WithPayload(payload *models.APIResponse) *PostCertificateTemplateHistoryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post certificate template history internal server error response
func (o *PostCertificateTemplateHistoryInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCertificateTemplateHistoryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
