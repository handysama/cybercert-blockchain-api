// Code generated by go-swagger; DO NOT EDIT.

package certificate_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"cybercert-blockchain-api/models"
)

// PostCertificateInfoQueryCertificateOKCode is the HTTP code returned for type PostCertificateInfoQueryCertificateOK
const PostCertificateInfoQueryCertificateOKCode int = 200

/*
PostCertificateInfoQueryCertificateOK OK

swagger:response postCertificateInfoQueryCertificateOK
*/
type PostCertificateInfoQueryCertificateOK struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPostCertificateInfoQueryCertificateOK creates PostCertificateInfoQueryCertificateOK with default headers values
func NewPostCertificateInfoQueryCertificateOK() *PostCertificateInfoQueryCertificateOK {

	return &PostCertificateInfoQueryCertificateOK{}
}

// WithPayload adds the payload to the post certificate info query certificate o k response
func (o *PostCertificateInfoQueryCertificateOK) WithPayload(payload interface{}) *PostCertificateInfoQueryCertificateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post certificate info query certificate o k response
func (o *PostCertificateInfoQueryCertificateOK) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCertificateInfoQueryCertificateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostCertificateInfoQueryCertificateUnauthorizedCode is the HTTP code returned for type PostCertificateInfoQueryCertificateUnauthorized
const PostCertificateInfoQueryCertificateUnauthorizedCode int = 401

/*
PostCertificateInfoQueryCertificateUnauthorized Unauthorized

swagger:response postCertificateInfoQueryCertificateUnauthorized
*/
type PostCertificateInfoQueryCertificateUnauthorized struct {
}

// NewPostCertificateInfoQueryCertificateUnauthorized creates PostCertificateInfoQueryCertificateUnauthorized with default headers values
func NewPostCertificateInfoQueryCertificateUnauthorized() *PostCertificateInfoQueryCertificateUnauthorized {

	return &PostCertificateInfoQueryCertificateUnauthorized{}
}

// WriteResponse to the client
func (o *PostCertificateInfoQueryCertificateUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// PostCertificateInfoQueryCertificateInternalServerErrorCode is the HTTP code returned for type PostCertificateInfoQueryCertificateInternalServerError
const PostCertificateInfoQueryCertificateInternalServerErrorCode int = 500

/*
PostCertificateInfoQueryCertificateInternalServerError Internal Server Error

swagger:response postCertificateInfoQueryCertificateInternalServerError
*/
type PostCertificateInfoQueryCertificateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewPostCertificateInfoQueryCertificateInternalServerError creates PostCertificateInfoQueryCertificateInternalServerError with default headers values
func NewPostCertificateInfoQueryCertificateInternalServerError() *PostCertificateInfoQueryCertificateInternalServerError {

	return &PostCertificateInfoQueryCertificateInternalServerError{}
}

// WithPayload adds the payload to the post certificate info query certificate internal server error response
func (o *PostCertificateInfoQueryCertificateInternalServerError) WithPayload(payload *models.APIResponse) *PostCertificateInfoQueryCertificateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post certificate info query certificate internal server error response
func (o *PostCertificateInfoQueryCertificateInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCertificateInfoQueryCertificateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
