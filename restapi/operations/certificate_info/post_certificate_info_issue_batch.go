// Code generated by go-swagger; DO NOT EDIT.

package certificate_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"cybercert-blockchain-api/models"
)

// PostCertificateInfoIssueBatchHandlerFunc turns a function with the right signature into a post certificate info issue batch handler
type PostCertificateInfoIssueBatchHandlerFunc func(PostCertificateInfoIssueBatchParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCertificateInfoIssueBatchHandlerFunc) Handle(params PostCertificateInfoIssueBatchParams) middleware.Responder {
	return fn(params)
}

// PostCertificateInfoIssueBatchHandler interface for that can handle valid post certificate info issue batch params
type PostCertificateInfoIssueBatchHandler interface {
	Handle(PostCertificateInfoIssueBatchParams) middleware.Responder
}

// NewPostCertificateInfoIssueBatch creates a new http.Handler for the post certificate info issue batch operation
func NewPostCertificateInfoIssueBatch(ctx *middleware.Context, handler PostCertificateInfoIssueBatchHandler) *PostCertificateInfoIssueBatch {
	return &PostCertificateInfoIssueBatch{Context: ctx, Handler: handler}
}

/*
	PostCertificateInfoIssueBatch swagger:route POST /certificate/info/issue-batch certificate_info postCertificateInfoIssueBatch

PostCertificateInfoIssueBatch post certificate info issue batch API
*/
type PostCertificateInfoIssueBatch struct {
	Context *middleware.Context
	Handler PostCertificateInfoIssueBatchHandler
}

func (o *PostCertificateInfoIssueBatch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostCertificateInfoIssueBatchParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostCertificateInfoIssueBatchBody post certificate info issue batch body
//
// swagger:model PostCertificateInfoIssueBatchBody
type PostCertificateInfoIssueBatchBody struct {

	// callback endpoint to notify platform for each issued certificate
	CallbackURL string `json:"callback_url,omitempty"`

	// certificate details csv content
	CertificateDetails []*models.CertificateInfo `json:"certificate_details"`

	// registered organization name on blockchain
	OrganizationName string `json:"organization_name,omitempty"`

	// template
	Template *models.CertificateTemplate `json:"template,omitempty"`
}

// Validate validates this post certificate info issue batch body
func (o *PostCertificateInfoIssueBatchBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCertificateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCertificateInfoIssueBatchBody) validateCertificateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.CertificateDetails) { // not required
		return nil
	}

	for i := 0; i < len(o.CertificateDetails); i++ {
		if swag.IsZero(o.CertificateDetails[i]) { // not required
			continue
		}

		if o.CertificateDetails[i] != nil {
			if err := o.CertificateDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificate_batch" + "." + "certificate_details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificate_batch" + "." + "certificate_details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostCertificateInfoIssueBatchBody) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(o.Template) { // not required
		return nil
	}

	if o.Template != nil {
		if err := o.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate_batch" + "." + "template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate_batch" + "." + "template")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post certificate info issue batch body based on the context it is used
func (o *PostCertificateInfoIssueBatchBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCertificateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCertificateInfoIssueBatchBody) contextValidateCertificateDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.CertificateDetails); i++ {

		if o.CertificateDetails[i] != nil {
			if err := o.CertificateDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("certificate_batch" + "." + "certificate_details" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("certificate_batch" + "." + "certificate_details" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostCertificateInfoIssueBatchBody) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {

	if o.Template != nil {
		if err := o.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate_batch" + "." + "template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate_batch" + "." + "template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostCertificateInfoIssueBatchBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCertificateInfoIssueBatchBody) UnmarshalBinary(b []byte) error {
	var res PostCertificateInfoIssueBatchBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
