// Code generated by go-swagger; DO NOT EDIT.

package certificate_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"cybercert-blockchain-api/models"
)

// DeleteCertificateInfoRevokeOKCode is the HTTP code returned for type DeleteCertificateInfoRevokeOK
const DeleteCertificateInfoRevokeOKCode int = 200

/*
DeleteCertificateInfoRevokeOK OK

swagger:response deleteCertificateInfoRevokeOK
*/
type DeleteCertificateInfoRevokeOK struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewDeleteCertificateInfoRevokeOK creates DeleteCertificateInfoRevokeOK with default headers values
func NewDeleteCertificateInfoRevokeOK() *DeleteCertificateInfoRevokeOK {

	return &DeleteCertificateInfoRevokeOK{}
}

// WithPayload adds the payload to the delete certificate info revoke o k response
func (o *DeleteCertificateInfoRevokeOK) WithPayload(payload *models.APIResponse) *DeleteCertificateInfoRevokeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete certificate info revoke o k response
func (o *DeleteCertificateInfoRevokeOK) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteCertificateInfoRevokeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteCertificateInfoRevokeUnauthorizedCode is the HTTP code returned for type DeleteCertificateInfoRevokeUnauthorized
const DeleteCertificateInfoRevokeUnauthorizedCode int = 401

/*
DeleteCertificateInfoRevokeUnauthorized Unauthorized

swagger:response deleteCertificateInfoRevokeUnauthorized
*/
type DeleteCertificateInfoRevokeUnauthorized struct {
}

// NewDeleteCertificateInfoRevokeUnauthorized creates DeleteCertificateInfoRevokeUnauthorized with default headers values
func NewDeleteCertificateInfoRevokeUnauthorized() *DeleteCertificateInfoRevokeUnauthorized {

	return &DeleteCertificateInfoRevokeUnauthorized{}
}

// WriteResponse to the client
func (o *DeleteCertificateInfoRevokeUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// DeleteCertificateInfoRevokeInternalServerErrorCode is the HTTP code returned for type DeleteCertificateInfoRevokeInternalServerError
const DeleteCertificateInfoRevokeInternalServerErrorCode int = 500

/*
DeleteCertificateInfoRevokeInternalServerError Internal Server Error

swagger:response deleteCertificateInfoRevokeInternalServerError
*/
type DeleteCertificateInfoRevokeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewDeleteCertificateInfoRevokeInternalServerError creates DeleteCertificateInfoRevokeInternalServerError with default headers values
func NewDeleteCertificateInfoRevokeInternalServerError() *DeleteCertificateInfoRevokeInternalServerError {

	return &DeleteCertificateInfoRevokeInternalServerError{}
}

// WithPayload adds the payload to the delete certificate info revoke internal server error response
func (o *DeleteCertificateInfoRevokeInternalServerError) WithPayload(payload *models.APIResponse) *DeleteCertificateInfoRevokeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete certificate info revoke internal server error response
func (o *DeleteCertificateInfoRevokeInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteCertificateInfoRevokeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
