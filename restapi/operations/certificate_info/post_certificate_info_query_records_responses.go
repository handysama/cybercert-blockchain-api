// Code generated by go-swagger; DO NOT EDIT.

package certificate_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"cybercert-blockchain-api/models"
)

// PostCertificateInfoQueryRecordsOKCode is the HTTP code returned for type PostCertificateInfoQueryRecordsOK
const PostCertificateInfoQueryRecordsOKCode int = 200

/*
PostCertificateInfoQueryRecordsOK OK

swagger:response postCertificateInfoQueryRecordsOK
*/
type PostCertificateInfoQueryRecordsOK struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPostCertificateInfoQueryRecordsOK creates PostCertificateInfoQueryRecordsOK with default headers values
func NewPostCertificateInfoQueryRecordsOK() *PostCertificateInfoQueryRecordsOK {

	return &PostCertificateInfoQueryRecordsOK{}
}

// WithPayload adds the payload to the post certificate info query records o k response
func (o *PostCertificateInfoQueryRecordsOK) WithPayload(payload interface{}) *PostCertificateInfoQueryRecordsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post certificate info query records o k response
func (o *PostCertificateInfoQueryRecordsOK) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCertificateInfoQueryRecordsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PostCertificateInfoQueryRecordsUnauthorizedCode is the HTTP code returned for type PostCertificateInfoQueryRecordsUnauthorized
const PostCertificateInfoQueryRecordsUnauthorizedCode int = 401

/*
PostCertificateInfoQueryRecordsUnauthorized Unauthorized

swagger:response postCertificateInfoQueryRecordsUnauthorized
*/
type PostCertificateInfoQueryRecordsUnauthorized struct {
}

// NewPostCertificateInfoQueryRecordsUnauthorized creates PostCertificateInfoQueryRecordsUnauthorized with default headers values
func NewPostCertificateInfoQueryRecordsUnauthorized() *PostCertificateInfoQueryRecordsUnauthorized {

	return &PostCertificateInfoQueryRecordsUnauthorized{}
}

// WriteResponse to the client
func (o *PostCertificateInfoQueryRecordsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// PostCertificateInfoQueryRecordsInternalServerErrorCode is the HTTP code returned for type PostCertificateInfoQueryRecordsInternalServerError
const PostCertificateInfoQueryRecordsInternalServerErrorCode int = 500

/*
PostCertificateInfoQueryRecordsInternalServerError Internal Server Error

swagger:response postCertificateInfoQueryRecordsInternalServerError
*/
type PostCertificateInfoQueryRecordsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewPostCertificateInfoQueryRecordsInternalServerError creates PostCertificateInfoQueryRecordsInternalServerError with default headers values
func NewPostCertificateInfoQueryRecordsInternalServerError() *PostCertificateInfoQueryRecordsInternalServerError {

	return &PostCertificateInfoQueryRecordsInternalServerError{}
}

// WithPayload adds the payload to the post certificate info query records internal server error response
func (o *PostCertificateInfoQueryRecordsInternalServerError) WithPayload(payload *models.APIResponse) *PostCertificateInfoQueryRecordsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post certificate info query records internal server error response
func (o *PostCertificateInfoQueryRecordsInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCertificateInfoQueryRecordsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
