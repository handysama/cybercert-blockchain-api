// Code generated by go-swagger; DO NOT EDIT.

package certificate_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"cybercert-blockchain-api/models"
)

// PostCertificateInfoIssueHandlerFunc turns a function with the right signature into a post certificate info issue handler
type PostCertificateInfoIssueHandlerFunc func(PostCertificateInfoIssueParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCertificateInfoIssueHandlerFunc) Handle(params PostCertificateInfoIssueParams) middleware.Responder {
	return fn(params)
}

// PostCertificateInfoIssueHandler interface for that can handle valid post certificate info issue params
type PostCertificateInfoIssueHandler interface {
	Handle(PostCertificateInfoIssueParams) middleware.Responder
}

// NewPostCertificateInfoIssue creates a new http.Handler for the post certificate info issue operation
func NewPostCertificateInfoIssue(ctx *middleware.Context, handler PostCertificateInfoIssueHandler) *PostCertificateInfoIssue {
	return &PostCertificateInfoIssue{Context: ctx, Handler: handler}
}

/*
	PostCertificateInfoIssue swagger:route POST /certificate/info/issue certificate_info postCertificateInfoIssue

PostCertificateInfoIssue post certificate info issue API
*/
type PostCertificateInfoIssue struct {
	Context *middleware.Context
	Handler PostCertificateInfoIssueHandler
}

func (o *PostCertificateInfoIssue) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostCertificateInfoIssueParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostCertificateInfoIssueBody post certificate info issue body
//
// swagger:model PostCertificateInfoIssueBody
type PostCertificateInfoIssueBody struct {

	// certificate details
	CertificateDetails *models.CertificateInfo `json:"certificate_details,omitempty"`

	// registered organization name on blockchain
	OrganizationName string `json:"organization_name,omitempty"`
}

// Validate validates this post certificate info issue body
func (o *PostCertificateInfoIssueBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCertificateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCertificateInfoIssueBody) validateCertificateDetails(formats strfmt.Registry) error {
	if swag.IsZero(o.CertificateDetails) { // not required
		return nil
	}

	if o.CertificateDetails != nil {
		if err := o.CertificateDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate_record" + "." + "certificate_details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate_record" + "." + "certificate_details")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post certificate info issue body based on the context it is used
func (o *PostCertificateInfoIssueBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCertificateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCertificateInfoIssueBody) contextValidateCertificateDetails(ctx context.Context, formats strfmt.Registry) error {

	if o.CertificateDetails != nil {
		if err := o.CertificateDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("certificate_record" + "." + "certificate_details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("certificate_record" + "." + "certificate_details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostCertificateInfoIssueBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCertificateInfoIssueBody) UnmarshalBinary(b []byte) error {
	var res PostCertificateInfoIssueBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
