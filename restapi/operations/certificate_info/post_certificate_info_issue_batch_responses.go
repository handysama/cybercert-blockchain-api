// Code generated by go-swagger; DO NOT EDIT.

package certificate_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"cybercert-blockchain-api/models"
)

// PostCertificateInfoIssueBatchOKCode is the HTTP code returned for type PostCertificateInfoIssueBatchOK
const PostCertificateInfoIssueBatchOKCode int = 200

/*
PostCertificateInfoIssueBatchOK OK

swagger:response postCertificateInfoIssueBatchOK
*/
type PostCertificateInfoIssueBatchOK struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewPostCertificateInfoIssueBatchOK creates PostCertificateInfoIssueBatchOK with default headers values
func NewPostCertificateInfoIssueBatchOK() *PostCertificateInfoIssueBatchOK {

	return &PostCertificateInfoIssueBatchOK{}
}

// WithPayload adds the payload to the post certificate info issue batch o k response
func (o *PostCertificateInfoIssueBatchOK) WithPayload(payload *models.APIResponse) *PostCertificateInfoIssueBatchOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post certificate info issue batch o k response
func (o *PostCertificateInfoIssueBatchOK) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCertificateInfoIssueBatchOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostCertificateInfoIssueBatchUnauthorizedCode is the HTTP code returned for type PostCertificateInfoIssueBatchUnauthorized
const PostCertificateInfoIssueBatchUnauthorizedCode int = 401

/*
PostCertificateInfoIssueBatchUnauthorized Unauthorized

swagger:response postCertificateInfoIssueBatchUnauthorized
*/
type PostCertificateInfoIssueBatchUnauthorized struct {
}

// NewPostCertificateInfoIssueBatchUnauthorized creates PostCertificateInfoIssueBatchUnauthorized with default headers values
func NewPostCertificateInfoIssueBatchUnauthorized() *PostCertificateInfoIssueBatchUnauthorized {

	return &PostCertificateInfoIssueBatchUnauthorized{}
}

// WriteResponse to the client
func (o *PostCertificateInfoIssueBatchUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// PostCertificateInfoIssueBatchInternalServerErrorCode is the HTTP code returned for type PostCertificateInfoIssueBatchInternalServerError
const PostCertificateInfoIssueBatchInternalServerErrorCode int = 500

/*
PostCertificateInfoIssueBatchInternalServerError Internal Server Error

swagger:response postCertificateInfoIssueBatchInternalServerError
*/
type PostCertificateInfoIssueBatchInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewPostCertificateInfoIssueBatchInternalServerError creates PostCertificateInfoIssueBatchInternalServerError with default headers values
func NewPostCertificateInfoIssueBatchInternalServerError() *PostCertificateInfoIssueBatchInternalServerError {

	return &PostCertificateInfoIssueBatchInternalServerError{}
}

// WithPayload adds the payload to the post certificate info issue batch internal server error response
func (o *PostCertificateInfoIssueBatchInternalServerError) WithPayload(payload *models.APIResponse) *PostCertificateInfoIssueBatchInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post certificate info issue batch internal server error response
func (o *PostCertificateInfoIssueBatchInternalServerError) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostCertificateInfoIssueBatchInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
