// Code generated by go-swagger; DO NOT EDIT.

package token_registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostAccessTokenHistoryHandlerFunc turns a function with the right signature into a post access token history handler
type PostAccessTokenHistoryHandlerFunc func(PostAccessTokenHistoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAccessTokenHistoryHandlerFunc) Handle(params PostAccessTokenHistoryParams) middleware.Responder {
	return fn(params)
}

// PostAccessTokenHistoryHandler interface for that can handle valid post access token history params
type PostAccessTokenHistoryHandler interface {
	Handle(PostAccessTokenHistoryParams) middleware.Responder
}

// NewPostAccessTokenHistory creates a new http.Handler for the post access token history operation
func NewPostAccessTokenHistory(ctx *middleware.Context, handler PostAccessTokenHistoryHandler) *PostAccessTokenHistory {
	return &PostAccessTokenHistory{Context: ctx, Handler: handler}
}

/*
	PostAccessTokenHistory swagger:route POST /access-token/history token_registry postAccessTokenHistory

PostAccessTokenHistory post access token history API
*/
type PostAccessTokenHistory struct {
	Context *middleware.Context
	Handler PostAccessTokenHistoryHandler
}

func (o *PostAccessTokenHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAccessTokenHistoryParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostAccessTokenHistoryBody post access token history body
//
// swagger:model PostAccessTokenHistoryBody
type PostAccessTokenHistoryBody struct {

	// registered organization name on blockchain
	OrganizationName string `json:"organization_name,omitempty"`

	// token id
	TokenID string `json:"token_id,omitempty"`
}

// Validate validates this post access token history body
func (o *PostAccessTokenHistoryBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post access token history body based on context it is used
func (o *PostAccessTokenHistoryBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAccessTokenHistoryBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAccessTokenHistoryBody) UnmarshalBinary(b []byte) error {
	var res PostAccessTokenHistoryBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
