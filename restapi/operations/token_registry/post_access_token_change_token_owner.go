// Code generated by go-swagger; DO NOT EDIT.

package token_registry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostAccessTokenChangeTokenOwnerHandlerFunc turns a function with the right signature into a post access token change token owner handler
type PostAccessTokenChangeTokenOwnerHandlerFunc func(PostAccessTokenChangeTokenOwnerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAccessTokenChangeTokenOwnerHandlerFunc) Handle(params PostAccessTokenChangeTokenOwnerParams) middleware.Responder {
	return fn(params)
}

// PostAccessTokenChangeTokenOwnerHandler interface for that can handle valid post access token change token owner params
type PostAccessTokenChangeTokenOwnerHandler interface {
	Handle(PostAccessTokenChangeTokenOwnerParams) middleware.Responder
}

// NewPostAccessTokenChangeTokenOwner creates a new http.Handler for the post access token change token owner operation
func NewPostAccessTokenChangeTokenOwner(ctx *middleware.Context, handler PostAccessTokenChangeTokenOwnerHandler) *PostAccessTokenChangeTokenOwner {
	return &PostAccessTokenChangeTokenOwner{Context: ctx, Handler: handler}
}

/*
	PostAccessTokenChangeTokenOwner swagger:route POST /access-token/change-token-owner token_registry postAccessTokenChangeTokenOwner

PostAccessTokenChangeTokenOwner post access token change token owner API
*/
type PostAccessTokenChangeTokenOwner struct {
	Context *middleware.Context
	Handler PostAccessTokenChangeTokenOwnerHandler
}

func (o *PostAccessTokenChangeTokenOwner) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAccessTokenChangeTokenOwnerParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostAccessTokenChangeTokenOwnerBody post access token change token owner body
//
// swagger:model PostAccessTokenChangeTokenOwnerBody
type PostAccessTokenChangeTokenOwnerBody struct {

	// registered organization name on blockchain
	OrganizationName string `json:"organization_name,omitempty"`

	// owner
	// Required: true
	Owner *string `json:"owner"`

	// token id
	// Required: true
	TokenID *string `json:"token_id"`
}

// Validate validates this post access token change token owner body
func (o *PostAccessTokenChangeTokenOwnerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTokenID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAccessTokenChangeTokenOwnerBody) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("token_record"+"."+"owner", "body", o.Owner); err != nil {
		return err
	}

	return nil
}

func (o *PostAccessTokenChangeTokenOwnerBody) validateTokenID(formats strfmt.Registry) error {

	if err := validate.Required("token_record"+"."+"token_id", "body", o.TokenID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post access token change token owner body based on context it is used
func (o *PostAccessTokenChangeTokenOwnerBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAccessTokenChangeTokenOwnerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAccessTokenChangeTokenOwnerBody) UnmarshalBinary(b []byte) error {
	var res PostAccessTokenChangeTokenOwnerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
