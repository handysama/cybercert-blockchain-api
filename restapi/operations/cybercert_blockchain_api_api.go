// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"cybercert-blockchain-api/restapi/operations/certificate_info"
	"cybercert-blockchain-api/restapi/operations/certificate_template"
	"cybercert-blockchain-api/restapi/operations/healthcheck"
	"cybercert-blockchain-api/restapi/operations/token_registry"
)

// NewCybercertBlockchainAPIAPI creates a new CybercertBlockchainAPI instance
func NewCybercertBlockchainAPIAPI(spec *loads.Document) *CybercertBlockchainAPIAPI {
	return &CybercertBlockchainAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		TokenRegistryDeleteAccessTokenRevokeHandler: token_registry.DeleteAccessTokenRevokeHandlerFunc(func(params token_registry.DeleteAccessTokenRevokeParams) middleware.Responder {
			return middleware.NotImplemented("operation token_registry.DeleteAccessTokenRevoke has not yet been implemented")
		}),
		CertificateInfoDeleteCertificateInfoRevokeHandler: certificate_info.DeleteCertificateInfoRevokeHandlerFunc(func(params certificate_info.DeleteCertificateInfoRevokeParams) middleware.Responder {
			return middleware.NotImplemented("operation certificate_info.DeleteCertificateInfoRevoke has not yet been implemented")
		}),
		HealthcheckGetHealthcheckReadyHandler: healthcheck.GetHealthcheckReadyHandlerFunc(func(params healthcheck.GetHealthcheckReadyParams) middleware.Responder {
			return middleware.NotImplemented("operation healthcheck.GetHealthcheckReady has not yet been implemented")
		}),
		TokenRegistryPostAccessTokenChangeTokenOwnerHandler: token_registry.PostAccessTokenChangeTokenOwnerHandlerFunc(func(params token_registry.PostAccessTokenChangeTokenOwnerParams) middleware.Responder {
			return middleware.NotImplemented("operation token_registry.PostAccessTokenChangeTokenOwner has not yet been implemented")
		}),
		TokenRegistryPostAccessTokenConsumeHandler: token_registry.PostAccessTokenConsumeHandlerFunc(func(params token_registry.PostAccessTokenConsumeParams) middleware.Responder {
			return middleware.NotImplemented("operation token_registry.PostAccessTokenConsume has not yet been implemented")
		}),
		TokenRegistryPostAccessTokenHistoryHandler: token_registry.PostAccessTokenHistoryHandlerFunc(func(params token_registry.PostAccessTokenHistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation token_registry.PostAccessTokenHistory has not yet been implemented")
		}),
		TokenRegistryPostAccessTokenIssueRootHandler: token_registry.PostAccessTokenIssueRootHandlerFunc(func(params token_registry.PostAccessTokenIssueRootParams) middleware.Responder {
			return middleware.NotImplemented("operation token_registry.PostAccessTokenIssueRoot has not yet been implemented")
		}),
		TokenRegistryPostAccessTokenIssueStandardHandler: token_registry.PostAccessTokenIssueStandardHandlerFunc(func(params token_registry.PostAccessTokenIssueStandardParams) middleware.Responder {
			return middleware.NotImplemented("operation token_registry.PostAccessTokenIssueStandard has not yet been implemented")
		}),
		TokenRegistryPostAccessTokenIssueTransferableHandler: token_registry.PostAccessTokenIssueTransferableHandlerFunc(func(params token_registry.PostAccessTokenIssueTransferableParams) middleware.Responder {
			return middleware.NotImplemented("operation token_registry.PostAccessTokenIssueTransferable has not yet been implemented")
		}),
		TokenRegistryPostAccessTokenQueryHandler: token_registry.PostAccessTokenQueryHandlerFunc(func(params token_registry.PostAccessTokenQueryParams) middleware.Responder {
			return middleware.NotImplemented("operation token_registry.PostAccessTokenQuery has not yet been implemented")
		}),
		TokenRegistryPostAccessTokenQueryRecordsHandler: token_registry.PostAccessTokenQueryRecordsHandlerFunc(func(params token_registry.PostAccessTokenQueryRecordsParams) middleware.Responder {
			return middleware.NotImplemented("operation token_registry.PostAccessTokenQueryRecords has not yet been implemented")
		}),
		TokenRegistryPostAccessTokenStatusHandler: token_registry.PostAccessTokenStatusHandlerFunc(func(params token_registry.PostAccessTokenStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation token_registry.PostAccessTokenStatus has not yet been implemented")
		}),
		CertificateInfoPostCertificateInfoHistoryHandler: certificate_info.PostCertificateInfoHistoryHandlerFunc(func(params certificate_info.PostCertificateInfoHistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation certificate_info.PostCertificateInfoHistory has not yet been implemented")
		}),
		CertificateInfoPostCertificateInfoIssueHandler: certificate_info.PostCertificateInfoIssueHandlerFunc(func(params certificate_info.PostCertificateInfoIssueParams) middleware.Responder {
			return middleware.NotImplemented("operation certificate_info.PostCertificateInfoIssue has not yet been implemented")
		}),
		CertificateInfoPostCertificateInfoIssueBatchHandler: certificate_info.PostCertificateInfoIssueBatchHandlerFunc(func(params certificate_info.PostCertificateInfoIssueBatchParams) middleware.Responder {
			return middleware.NotImplemented("operation certificate_info.PostCertificateInfoIssueBatch has not yet been implemented")
		}),
		CertificateInfoPostCertificateInfoQueryCertificateHandler: certificate_info.PostCertificateInfoQueryCertificateHandlerFunc(func(params certificate_info.PostCertificateInfoQueryCertificateParams) middleware.Responder {
			return middleware.NotImplemented("operation certificate_info.PostCertificateInfoQueryCertificate has not yet been implemented")
		}),
		CertificateInfoPostCertificateInfoQueryRecordsHandler: certificate_info.PostCertificateInfoQueryRecordsHandlerFunc(func(params certificate_info.PostCertificateInfoQueryRecordsParams) middleware.Responder {
			return middleware.NotImplemented("operation certificate_info.PostCertificateInfoQueryRecords has not yet been implemented")
		}),
		CertificateTemplatePostCertificateTemplateHandler: certificate_template.PostCertificateTemplateHandlerFunc(func(params certificate_template.PostCertificateTemplateParams) middleware.Responder {
			return middleware.NotImplemented("operation certificate_template.PostCertificateTemplate has not yet been implemented")
		}),
		CertificateTemplatePostCertificateTemplateHistoryHandler: certificate_template.PostCertificateTemplateHistoryHandlerFunc(func(params certificate_template.PostCertificateTemplateHistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation certificate_template.PostCertificateTemplateHistory has not yet been implemented")
		}),
		CertificateTemplatePostCertificateTemplateQueryHandler: certificate_template.PostCertificateTemplateQueryHandlerFunc(func(params certificate_template.PostCertificateTemplateQueryParams) middleware.Responder {
			return middleware.NotImplemented("operation certificate_template.PostCertificateTemplateQuery has not yet been implemented")
		}),
	}
}

/*CybercertBlockchainAPIAPI eCert Blockchain API endpoint for query and invoke chaincode in Hyperledger Fabric. */
type CybercertBlockchainAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// TokenRegistryDeleteAccessTokenRevokeHandler sets the operation handler for the delete access token revoke operation
	TokenRegistryDeleteAccessTokenRevokeHandler token_registry.DeleteAccessTokenRevokeHandler
	// CertificateInfoDeleteCertificateInfoRevokeHandler sets the operation handler for the delete certificate info revoke operation
	CertificateInfoDeleteCertificateInfoRevokeHandler certificate_info.DeleteCertificateInfoRevokeHandler
	// HealthcheckGetHealthcheckReadyHandler sets the operation handler for the get healthcheck ready operation
	HealthcheckGetHealthcheckReadyHandler healthcheck.GetHealthcheckReadyHandler
	// TokenRegistryPostAccessTokenChangeTokenOwnerHandler sets the operation handler for the post access token change token owner operation
	TokenRegistryPostAccessTokenChangeTokenOwnerHandler token_registry.PostAccessTokenChangeTokenOwnerHandler
	// TokenRegistryPostAccessTokenConsumeHandler sets the operation handler for the post access token consume operation
	TokenRegistryPostAccessTokenConsumeHandler token_registry.PostAccessTokenConsumeHandler
	// TokenRegistryPostAccessTokenHistoryHandler sets the operation handler for the post access token history operation
	TokenRegistryPostAccessTokenHistoryHandler token_registry.PostAccessTokenHistoryHandler
	// TokenRegistryPostAccessTokenIssueRootHandler sets the operation handler for the post access token issue root operation
	TokenRegistryPostAccessTokenIssueRootHandler token_registry.PostAccessTokenIssueRootHandler
	// TokenRegistryPostAccessTokenIssueStandardHandler sets the operation handler for the post access token issue standard operation
	TokenRegistryPostAccessTokenIssueStandardHandler token_registry.PostAccessTokenIssueStandardHandler
	// TokenRegistryPostAccessTokenIssueTransferableHandler sets the operation handler for the post access token issue transferable operation
	TokenRegistryPostAccessTokenIssueTransferableHandler token_registry.PostAccessTokenIssueTransferableHandler
	// TokenRegistryPostAccessTokenQueryHandler sets the operation handler for the post access token query operation
	TokenRegistryPostAccessTokenQueryHandler token_registry.PostAccessTokenQueryHandler
	// TokenRegistryPostAccessTokenQueryRecordsHandler sets the operation handler for the post access token query records operation
	TokenRegistryPostAccessTokenQueryRecordsHandler token_registry.PostAccessTokenQueryRecordsHandler
	// TokenRegistryPostAccessTokenStatusHandler sets the operation handler for the post access token status operation
	TokenRegistryPostAccessTokenStatusHandler token_registry.PostAccessTokenStatusHandler
	// CertificateInfoPostCertificateInfoHistoryHandler sets the operation handler for the post certificate info history operation
	CertificateInfoPostCertificateInfoHistoryHandler certificate_info.PostCertificateInfoHistoryHandler
	// CertificateInfoPostCertificateInfoIssueHandler sets the operation handler for the post certificate info issue operation
	CertificateInfoPostCertificateInfoIssueHandler certificate_info.PostCertificateInfoIssueHandler
	// CertificateInfoPostCertificateInfoIssueBatchHandler sets the operation handler for the post certificate info issue batch operation
	CertificateInfoPostCertificateInfoIssueBatchHandler certificate_info.PostCertificateInfoIssueBatchHandler
	// CertificateInfoPostCertificateInfoQueryCertificateHandler sets the operation handler for the post certificate info query certificate operation
	CertificateInfoPostCertificateInfoQueryCertificateHandler certificate_info.PostCertificateInfoQueryCertificateHandler
	// CertificateInfoPostCertificateInfoQueryRecordsHandler sets the operation handler for the post certificate info query records operation
	CertificateInfoPostCertificateInfoQueryRecordsHandler certificate_info.PostCertificateInfoQueryRecordsHandler
	// CertificateTemplatePostCertificateTemplateHandler sets the operation handler for the post certificate template operation
	CertificateTemplatePostCertificateTemplateHandler certificate_template.PostCertificateTemplateHandler
	// CertificateTemplatePostCertificateTemplateHistoryHandler sets the operation handler for the post certificate template history operation
	CertificateTemplatePostCertificateTemplateHistoryHandler certificate_template.PostCertificateTemplateHistoryHandler
	// CertificateTemplatePostCertificateTemplateQueryHandler sets the operation handler for the post certificate template query operation
	CertificateTemplatePostCertificateTemplateQueryHandler certificate_template.PostCertificateTemplateQueryHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *CybercertBlockchainAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *CybercertBlockchainAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *CybercertBlockchainAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *CybercertBlockchainAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *CybercertBlockchainAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *CybercertBlockchainAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *CybercertBlockchainAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *CybercertBlockchainAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *CybercertBlockchainAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the CybercertBlockchainAPIAPI
func (o *CybercertBlockchainAPIAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.TokenRegistryDeleteAccessTokenRevokeHandler == nil {
		unregistered = append(unregistered, "token_registry.DeleteAccessTokenRevokeHandler")
	}
	if o.CertificateInfoDeleteCertificateInfoRevokeHandler == nil {
		unregistered = append(unregistered, "certificate_info.DeleteCertificateInfoRevokeHandler")
	}
	if o.HealthcheckGetHealthcheckReadyHandler == nil {
		unregistered = append(unregistered, "healthcheck.GetHealthcheckReadyHandler")
	}
	if o.TokenRegistryPostAccessTokenChangeTokenOwnerHandler == nil {
		unregistered = append(unregistered, "token_registry.PostAccessTokenChangeTokenOwnerHandler")
	}
	if o.TokenRegistryPostAccessTokenConsumeHandler == nil {
		unregistered = append(unregistered, "token_registry.PostAccessTokenConsumeHandler")
	}
	if o.TokenRegistryPostAccessTokenHistoryHandler == nil {
		unregistered = append(unregistered, "token_registry.PostAccessTokenHistoryHandler")
	}
	if o.TokenRegistryPostAccessTokenIssueRootHandler == nil {
		unregistered = append(unregistered, "token_registry.PostAccessTokenIssueRootHandler")
	}
	if o.TokenRegistryPostAccessTokenIssueStandardHandler == nil {
		unregistered = append(unregistered, "token_registry.PostAccessTokenIssueStandardHandler")
	}
	if o.TokenRegistryPostAccessTokenIssueTransferableHandler == nil {
		unregistered = append(unregistered, "token_registry.PostAccessTokenIssueTransferableHandler")
	}
	if o.TokenRegistryPostAccessTokenQueryHandler == nil {
		unregistered = append(unregistered, "token_registry.PostAccessTokenQueryHandler")
	}
	if o.TokenRegistryPostAccessTokenQueryRecordsHandler == nil {
		unregistered = append(unregistered, "token_registry.PostAccessTokenQueryRecordsHandler")
	}
	if o.TokenRegistryPostAccessTokenStatusHandler == nil {
		unregistered = append(unregistered, "token_registry.PostAccessTokenStatusHandler")
	}
	if o.CertificateInfoPostCertificateInfoHistoryHandler == nil {
		unregistered = append(unregistered, "certificate_info.PostCertificateInfoHistoryHandler")
	}
	if o.CertificateInfoPostCertificateInfoIssueHandler == nil {
		unregistered = append(unregistered, "certificate_info.PostCertificateInfoIssueHandler")
	}
	if o.CertificateInfoPostCertificateInfoIssueBatchHandler == nil {
		unregistered = append(unregistered, "certificate_info.PostCertificateInfoIssueBatchHandler")
	}
	if o.CertificateInfoPostCertificateInfoQueryCertificateHandler == nil {
		unregistered = append(unregistered, "certificate_info.PostCertificateInfoQueryCertificateHandler")
	}
	if o.CertificateInfoPostCertificateInfoQueryRecordsHandler == nil {
		unregistered = append(unregistered, "certificate_info.PostCertificateInfoQueryRecordsHandler")
	}
	if o.CertificateTemplatePostCertificateTemplateHandler == nil {
		unregistered = append(unregistered, "certificate_template.PostCertificateTemplateHandler")
	}
	if o.CertificateTemplatePostCertificateTemplateHistoryHandler == nil {
		unregistered = append(unregistered, "certificate_template.PostCertificateTemplateHistoryHandler")
	}
	if o.CertificateTemplatePostCertificateTemplateQueryHandler == nil {
		unregistered = append(unregistered, "certificate_template.PostCertificateTemplateQueryHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *CybercertBlockchainAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *CybercertBlockchainAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	return nil
}

// Authorizer returns the registered authorizer
func (o *CybercertBlockchainAPIAPI) Authorizer() runtime.Authorizer {
	return nil
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *CybercertBlockchainAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *CybercertBlockchainAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *CybercertBlockchainAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the cybercert blockchain API API
func (o *CybercertBlockchainAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *CybercertBlockchainAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/access-token/revoke"] = token_registry.NewDeleteAccessTokenRevoke(o.context, o.TokenRegistryDeleteAccessTokenRevokeHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/certificate/info/revoke"] = certificate_info.NewDeleteCertificateInfoRevoke(o.context, o.CertificateInfoDeleteCertificateInfoRevokeHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/healthcheck/ready"] = healthcheck.NewGetHealthcheckReady(o.context, o.HealthcheckGetHealthcheckReadyHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/access-token/change-token-owner"] = token_registry.NewPostAccessTokenChangeTokenOwner(o.context, o.TokenRegistryPostAccessTokenChangeTokenOwnerHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/access-token/consume"] = token_registry.NewPostAccessTokenConsume(o.context, o.TokenRegistryPostAccessTokenConsumeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/access-token/history"] = token_registry.NewPostAccessTokenHistory(o.context, o.TokenRegistryPostAccessTokenHistoryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/access-token/issue/root"] = token_registry.NewPostAccessTokenIssueRoot(o.context, o.TokenRegistryPostAccessTokenIssueRootHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/access-token/issue/standard"] = token_registry.NewPostAccessTokenIssueStandard(o.context, o.TokenRegistryPostAccessTokenIssueStandardHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/access-token/issue/transferable"] = token_registry.NewPostAccessTokenIssueTransferable(o.context, o.TokenRegistryPostAccessTokenIssueTransferableHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/access-token/query"] = token_registry.NewPostAccessTokenQuery(o.context, o.TokenRegistryPostAccessTokenQueryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/access-token/query-records"] = token_registry.NewPostAccessTokenQueryRecords(o.context, o.TokenRegistryPostAccessTokenQueryRecordsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/access-token/status"] = token_registry.NewPostAccessTokenStatus(o.context, o.TokenRegistryPostAccessTokenStatusHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/certificate/info/history"] = certificate_info.NewPostCertificateInfoHistory(o.context, o.CertificateInfoPostCertificateInfoHistoryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/certificate/info/issue"] = certificate_info.NewPostCertificateInfoIssue(o.context, o.CertificateInfoPostCertificateInfoIssueHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/certificate/info/issue-batch"] = certificate_info.NewPostCertificateInfoIssueBatch(o.context, o.CertificateInfoPostCertificateInfoIssueBatchHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/certificate/info/query-certificate"] = certificate_info.NewPostCertificateInfoQueryCertificate(o.context, o.CertificateInfoPostCertificateInfoQueryCertificateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/certificate/info/query-records"] = certificate_info.NewPostCertificateInfoQueryRecords(o.context, o.CertificateInfoPostCertificateInfoQueryRecordsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/certificate/template"] = certificate_template.NewPostCertificateTemplate(o.context, o.CertificateTemplatePostCertificateTemplateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/certificate/template/history"] = certificate_template.NewPostCertificateTemplateHistory(o.context, o.CertificateTemplatePostCertificateTemplateHistoryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/certificate/template/query"] = certificate_template.NewPostCertificateTemplateQuery(o.context, o.CertificateTemplatePostCertificateTemplateQueryHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *CybercertBlockchainAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *CybercertBlockchainAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *CybercertBlockchainAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *CybercertBlockchainAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *CybercertBlockchainAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
